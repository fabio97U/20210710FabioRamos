@inject IRepositorio repositorio
@inject IJSRuntime js
@using System.Linq

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
    @*<DataAnnotationsValidator></DataAnnotationsValidator>*@
    <div class="modal-body">
        <div class="form-group">
            <label class="form-label">Nombre vehiculo:</label>
            <div>
                <InputText class="form-control" @bind-Value="@model.vehiculo.nombre_vehiculo" />
                <ValidationMessage For="@(() => model.vehiculo.nombre_vehiculo)" />
            </div>
        </div>
        <div class="form-group">
            <label class="form-label">Marca:</label>
            <div>
                <BlazoredTypeahead SearchMethod="BuscarMarca"
                                   @bind-Value="model.marca"
                                   Context="mar"
                                   DisableClear="false"
                                   EnableDropDown="true"
                                   ShowDropDownOnFocus="true"
                                   placeholder="Selecciona">
                    <SelectedTemplate>
                        @mar.nombre_marca
                    </SelectedTemplate>
                    <ResultTemplate>
                        @mar.nombre_marca
                    </ResultTemplate>
                </BlazoredTypeahead>
                <ValidationMessage For="@(() => model.marca)" />
            </div>
        </div>
        <div class="form-group">
            <label class="form-label">Modelo:</label>
            <div>
                <BlazoredTypeahead SearchMethod="BuscarModelo"
                                   @bind-Value="model.modelo"
                                   Context="mod"
                                   DisableClear="false"
                                   EnableDropDown="true"
                                   ShowDropDownOnFocus="true"
                                   placeholder="Selecciona">
                    <SelectedTemplate>
                        @mod.nombre_modelo
                    </SelectedTemplate>
                    <ResultTemplate>
                        @mod.nombre_modelo
                    </ResultTemplate>
                </BlazoredTypeahead>
                <ValidationMessage For="@(() => model.modelo)" />
            </div>
        </div>
        <div class="form-group">
            <label class="form-label">Año: </label>
            <div>
                <InputNumber class="form-control" @bind-Value="@model.vehiculo.anio" min="2000" />
                <ValidationMessage For="@(() => model.vehiculo.anio)" />
            </div>
        </div>
        <div class="form-group">
            <label class="form-label">Tipo negocio:</label>
            <div>
                <BlazoredTypeahead SearchMethod="Buscartipo_negocio"
                                   @bind-Value="model.tipo_Negocio"
                                   Context="tipo"
                                   DisableClear="false"
                                   EnableDropDown="true"
                                   ShowDropDownOnFocus="true"
                                   placeholder="Selecciona">
                    <SelectedTemplate>
                        @tipo.nombre_negocio
                    </SelectedTemplate>
                    <ResultTemplate>
                        @tipo.nombre_negocio
                    </ResultTemplate>
                </BlazoredTypeahead>
                <ValidationMessage For="@(() => model.tipo_Negocio)" />
            </div>
        </div>
        <div class="form-group">
            <label class="form-label">Estado: </label>
            <div>
                <InputText class="form-control" @bind-Value="@model.vehiculo.estado" />
                <ValidationMessage For="@(() => model.vehiculo.estado)" />
            </div>
        </div>
        <br />
        @if (EsBorrar)
        {
            <button class="btn btn-danger" type="submit" disabled="@SubmitDisabled">Clic aquí para borrar el registro</button>
            if (SubmitDisabled)
            {
                <div class="spinner-border text-blue" role="status"></div>
            }
        }
        else
        {
            <button class="btn btn-success" type="submit" disabled="@SubmitDisabled">@TextoBoton</button>
            if (SubmitDisabled)
            {
                <div class="spinner-border text-blue" role="status"></div>
            }
        }
    </div>
</EditForm>

@code {
    [Parameter] public vehiculoDTO model { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public string TextoBoton { get; set; }
    [Parameter] public bool EsBorrar { get; set; }
    [Parameter] public bool SubmitDisabled { get; set; } = false;
    public List<marca> list_marca { get; set; } = new List<marca>();
    public List<modelo> list_modelo { get; set; } = new List<modelo>();
    public List<tipo_negocio> list_tipo_negocio { get; set; } = new List<tipo_negocio>();

    protected async override void OnAfterRender (bool firstRender)
    {
        if (firstRender)
            await Cargar();
        base.OnAfterRender(firstRender);
    }

    private async Task Cargar ()
    {
        var responseHttpMarca = await repositorio.Get<List<marca>>("api/marcas");
        list_marca = responseHttpMarca.Response;

        var responseHttpModelo = await repositorio.Get<List<modelo>>("api/modeloes");
        list_modelo = responseHttpModelo.Response;

        var responseHttpTipoNegocio = await repositorio.Get<List<tipo_negocio>>("api/tipo_negocio");
        list_tipo_negocio = responseHttpTipoNegocio.Response;
    }

    private async Task<IEnumerable<marca>> BuscarMarca (string searchText)
    {
        return await Task.FromResult(list_marca.Where(x => x.nombre_marca.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<modelo>> BuscarModelo (string searchText)
    {
        return await Task.FromResult(list_modelo.Where(x => x.nombre_modelo.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<tipo_negocio>> Buscartipo_negocio (string searchText)
    {
        return await Task.FromResult(list_tipo_negocio.Where(x => x.nombre_negocio.ToLower().Contains(searchText.ToLower())).ToList());
    }
}