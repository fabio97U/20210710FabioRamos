// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using VentaAutos.Server.ModelosSps;

namespace VentaAutos.Server.Context
{
    public partial class EasycarContext
    {
        private EasycarContextProcedures _procedures;

        public EasycarContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EasycarContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public EasycarContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class EasycarContextProcedures
    {
        private readonly EasycarContext _context;

        public EasycarContextProcedures(EasycarContext context)
        {
            _context = context;
        }

        public virtual async Task<List<sp_clienteResult>> sp_clienteAsync(int? opcion, int? id_cliente, string nombre_completo, string dui, DateTime? fecha_nacimiento, string telefono, string email, DateTime? fecha_registro, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "opcion",
                    Value = opcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id_cliente",
                    Value = id_cliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nombre_completo",
                    Size = 100,
                    Value = nombre_completo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dui",
                    Size = 15,
                    Value = dui ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecha_nacimiento",
                    Value = fecha_nacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "telefono",
                    Size = 14,
                    Value = telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 150,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fecha_registro",
                    Value = fecha_registro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_clienteResult>("EXEC @returnValue = [dbo].[sp_cliente] @opcion, @id_cliente, @nombre_completo, @dui, @fecha_nacimiento, @telefono, @email, @fecha_registro", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
